                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.2 #14228 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _InitSprites
                                     13 	.globl _InitStates
                                     14 	.globl _vbl_update
                                     15 	.globl _FadeOut
                                     16 	.globl _FadeIn
                                     17 	.globl _PopBank
                                     18 	.globl _PushBank
                                     19 	.globl _SpriteManagerUpdate
                                     20 	.globl _SpriteManagerReset
                                     21 	.globl _hUGE_mute
                                     22 	.globl _MusicCallback
                                     23 	.globl _display_off
                                     24 	.globl _wait_vbl_done
                                     25 	.globl _set_interrupts
                                     26 	.globl _joypad
                                     27 	.globl _add_low_priority_TIM
                                     28 	.globl _add_LCD
                                     29 	.globl _add_VBL
                                     30 	.globl _default_palette
                                     31 	.globl _music_mute_frames
                                     32 	.globl _vbl_count
                                     33 	.globl _state_running
                                     34 	.globl _current_state
                                     35 	.globl _delta_time
                                     36 	.globl _SetState
                                     37 	.globl _LCD_isr
                                     38 	.globl _SetWindowY
                                     39 ;--------------------------------------------------------
                                     40 ; special function registers
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area _DATA
      000000                         46 _delta_time::
      000000                         47 	.ds 1
      000001                         48 _current_state::
      000001                         49 	.ds 1
                                     50 ;--------------------------------------------------------
                                     51 ; ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area _INITIALIZED
      000000                         54 _state_running::
      000000                         55 	.ds 1
      000001                         56 _vbl_count::
      000001                         57 	.ds 1
      000002                         58 _music_mute_frames::
      000002                         59 	.ds 1
      000003                         60 _default_palette::
      000003                         61 	.ds 8
                                     62 ;--------------------------------------------------------
                                     63 ; absolute external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area _DABS (ABS)
                                     66 ;--------------------------------------------------------
                                     67 ; global & static initialisations
                                     68 ;--------------------------------------------------------
                                     69 	.area _HOME
                                     70 	.area _GSINIT
                                     71 	.area _GSFINAL
                                     72 	.area _GSINIT
                                     73 ;--------------------------------------------------------
                                     74 ; Home
                                     75 ;--------------------------------------------------------
                                     76 	.area _HOME
                                     77 ;C:/gbdk/ZGB/common/src/main.c:69: void LCD_isr() NONBANKED {
                                     78 ;	---------------------------------
                                     79 ; Function LCD_isr
                                     80 ; ---------------------------------
      000000                         81 _LCD_isr::
                                     82 ;C:/gbdk/ZGB/common/src/main.c:70: if (LYC_REG == 0) {
      000000 FAr00r00         [16]   83 	ld	a, (#_LYC_REG)
      000003 B7               [ 4]   84 	or	a, a
      000004 20 19            [12]   85 	jr	NZ, 00105$
                                     86 ;C:/gbdk/ZGB/common/src/main.c:71: if (WY_REG == 0) {
      000006 FAr00r00         [16]   87 	ld	a, (#_WY_REG)
      000009 B7               [ 4]   88 	or	a, a
      00000A 20 07            [12]   89 	jr	NZ, 00102$
                                     90 ;C:/gbdk/ZGB/common/src/main.c:72: HIDE_SPRITES;
      00000C F0r00            [12]   91 	ldh	a, (_LCDC_REG + 0)
      00000E E6 FD            [ 8]   92 	and	a, #0xfd
      000010 E0r00            [12]   93 	ldh	(_LCDC_REG + 0), a
      000012 C9               [16]   94 	ret
      000013                         95 00102$:
                                     96 ;C:/gbdk/ZGB/common/src/main.c:74: SHOW_SPRITES;
      000013 F0r00            [12]   97 	ldh	a, (_LCDC_REG + 0)
      000015 F6 02            [ 8]   98 	or	a, #0x02
      000017 E0r00            [12]   99 	ldh	(_LCDC_REG + 0), a
                                    100 ;C:/gbdk/ZGB/common/src/main.c:75: LYC_REG = WY_REG - 1;
      000019 F0r00            [12]  101 	ldh	a, (_WY_REG + 0)
      00001B 3D               [ 4]  102 	dec	a
      00001C E0r00            [12]  103 	ldh	(_LYC_REG + 0), a
      00001E C9               [16]  104 	ret
      00001F                        105 00105$:
                                    106 ;C:/gbdk/ZGB/common/src/main.c:78: HIDE_SPRITES;
      00001F F0r00            [12]  107 	ldh	a, (_LCDC_REG + 0)
      000021 E6 FD            [ 8]  108 	and	a, #0xfd
      000023 E0r00            [12]  109 	ldh	(_LCDC_REG + 0), a
                                    110 ;C:/gbdk/ZGB/common/src/main.c:79: LYC_REG = 0;
      000025 AF               [ 4]  111 	xor	a, a
      000026 E0r00            [12]  112 	ldh	(_LYC_REG + 0), a
                                    113 ;C:/gbdk/ZGB/common/src/main.c:81: }
      000028 C9               [16]  114 	ret
                                    115 	.area _HOME
                                    116 ;--------------------------------------------------------
                                    117 ; code
                                    118 ;--------------------------------------------------------
                                    119 	.area _CODE
                                    120 ;C:/gbdk/ZGB/common/src/main.c:26: void SetState(UINT8 state) {
                                    121 ;	---------------------------------
                                    122 ; Function SetState
                                    123 ; ---------------------------------
      000000                        124 _SetState::
      000000 EAr00r00         [16]  125 	ld	(#_next_state),a
                                    126 ;C:/gbdk/ZGB/common/src/main.c:27: state_running = 0;
      000003 21r00r00         [12]  127 	ld	hl, #_state_running
      000006 36 00            [12]  128 	ld	(hl), #0x00
                                    129 ;C:/gbdk/ZGB/common/src/main.c:28: next_state = state;
                                    130 ;C:/gbdk/ZGB/common/src/main.c:29: }
      000008 C9               [16]  131 	ret
                                    132 ;C:/gbdk/ZGB/common/src/main.c:33: void vbl_update() {
                                    133 ;	---------------------------------
                                    134 ; Function vbl_update
                                    135 ; ---------------------------------
      000009                        136 _vbl_update::
                                    137 ;C:/gbdk/ZGB/common/src/main.c:34: vbl_count ++;
      000009 21r01r00         [12]  138 	ld	hl, #_vbl_count
      00000C 34               [12]  139 	inc	(hl)
                                    140 ;C:/gbdk/ZGB/common/src/main.c:36: SCX_REG = scroll_x_vblank + (scroll_offset_x << 3);
      00000D FAr00r00         [16]  141 	ld	a, (#_scroll_offset_x)
      000010 87               [ 4]  142 	add	a, a
      000011 87               [ 4]  143 	add	a, a
      000012 87               [ 4]  144 	add	a, a
      000013 21r00r00         [12]  145 	ld	hl, #_scroll_x_vblank
      000016 4E               [ 8]  146 	ld	c, (hl)
      000017 81               [ 4]  147 	add	a, c
      000018 E0r00            [12]  148 	ldh	(_SCX_REG + 0), a
                                    149 ;C:/gbdk/ZGB/common/src/main.c:37: SCY_REG = scroll_y_vblank + (scroll_offset_y << 3);
      00001A FAr00r00         [16]  150 	ld	a, (#_scroll_offset_y)
      00001D 87               [ 4]  151 	add	a, a
      00001E 87               [ 4]  152 	add	a, a
      00001F 87               [ 4]  153 	add	a, a
      000020 21r00r00         [12]  154 	ld	hl, #_scroll_y_vblank
      000023 4E               [ 8]  155 	ld	c, (hl)
      000024 81               [ 4]  156 	add	a, c
      000025 E0r00            [12]  157 	ldh	(_SCY_REG + 0), a
                                    158 ;C:/gbdk/ZGB/common/src/main.c:39: if(music_mute_frames != 0) {
      000027 21r02r00         [12]  159 	ld	hl, #_music_mute_frames
      00002A 7E               [ 8]  160 	ld	a, (hl)
      00002B B7               [ 4]  161 	or	a, a
      00002C C8               [20]  162 	ret	Z
                                    163 ;C:/gbdk/ZGB/common/src/main.c:40: music_mute_frames --;
                                    164 ;C:/gbdk/ZGB/common/src/main.c:41: if(music_mute_frames == 0) {
      00002D 35               [12]  165 	dec	(hl)
      00002E 7E               [ 8]  166 	ld	a, (hl)
      00002F C0               [20]  167 	ret	NZ
                                    168 ;C:/gbdk/ZGB/common/src/main.c:42: UNMUTE_ALL_CHANNELS;
      000030 AF               [ 4]  169 	xor	a, a
                                    170 ;C:/gbdk/ZGB/common/src/main.c:45: }
      000031 C3r00r00         [16]  171 	jp	_hUGE_mute
                                    172 ;C:/gbdk/ZGB/common/src/main.c:83: void SetWindowY(UINT8 y) {
                                    173 ;	---------------------------------
                                    174 ; Function SetWindowY
                                    175 ; ---------------------------------
      000034                        176 _SetWindowY::
                                    177 ;C:/gbdk/ZGB/common/src/main.c:84: WY_REG = y;
      000034 4F               [ 4]  178 	ld	c, a
      000035 E0r00            [12]  179 	ldh	(_WY_REG + 0), a
                                    180 ;C:/gbdk/ZGB/common/src/main.c:85: LYC_REG = y - 1;
      000037 79               [ 4]  181 	ld	a, c
      000038 3D               [ 4]  182 	dec	a
      000039 E0r00            [12]  183 	ldh	(_LYC_REG + 0), a
                                    184 ;C:/gbdk/ZGB/common/src/main.c:86: if (y < 144u) {
      00003B 79               [ 4]  185 	ld	a, c
      00003C D6 90            [ 8]  186 	sub	a, #0x90
      00003E 30 07            [12]  187 	jr	NC, 00102$
                                    188 ;C:/gbdk/ZGB/common/src/main.c:87: SHOW_WIN; 
      000040 F0r00            [12]  189 	ldh	a, (_LCDC_REG + 0)
      000042 F6 20            [ 8]  190 	or	a, #0x20
      000044 E0r00            [12]  191 	ldh	(_LCDC_REG + 0), a
      000046 C9               [16]  192 	ret
      000047                        193 00102$:
                                    194 ;C:/gbdk/ZGB/common/src/main.c:89: HIDE_WIN; 
      000047 F0r00            [12]  195 	ldh	a, (_LCDC_REG + 0)
      000049 E6 DF            [ 8]  196 	and	a, #0xdf
      00004B E0r00            [12]  197 	ldh	(_LCDC_REG + 0), a
                                    198 ;C:/gbdk/ZGB/common/src/main.c:90: LYC_REG = 160u; 
      00004D 3E A0            [ 8]  199 	ld	a, #0xa0
      00004F E0r00            [12]  200 	ldh	(_LYC_REG + 0), a
                                    201 ;C:/gbdk/ZGB/common/src/main.c:92: }
      000051 C9               [16]  202 	ret
                                    203 ;C:/gbdk/ZGB/common/src/main.c:97: void main() {
                                    204 ;	---------------------------------
                                    205 ; Function main
                                    206 ; ---------------------------------
      000052                        207 _main::
                                    208 ;C:/gbdk/ZGB/common/src/main.c:99: for (UINT8 i = 4; i != 0; i--) {
      000052 0E 04            [ 8]  209 	ld	c, #0x04
      000054                        210 00115$:
      000054 79               [ 4]  211 	ld	a, c
      000055 B7               [ 4]  212 	or	a, a
      000056 28 06            [12]  213 	jr	Z, 00101$
                                    214 ;C:/gbdk/ZGB/common/src/main.c:100: wait_vbl_done();
      000058 CDr00r00         [24]  215 	call	_wait_vbl_done
                                    216 ;C:/gbdk/ZGB/common/src/main.c:99: for (UINT8 i = 4; i != 0; i--) {
      00005B 0D               [ 4]  217 	dec	c
      00005C 18 F6            [12]  218 	jr	00115$
      00005E                        219 00101$:
                                    220 ;C:/gbdk/ZGB/common/src/main.c:113: PUSH_BANK(1);
      00005E 3E 01            [ 8]  221 	ld	a, #0x01
      000060 F5               [16]  222 	push	af
      000061 33               [ 8]  223 	inc	sp
      000062 CDr00r00         [24]  224 	call	_PushBank
      000065 33               [ 8]  225 	inc	sp
                                    226 ;C:/gbdk/ZGB/common/src/main.c:114: InitStates();
      000066 CDr00r00         [24]  227 	call	_InitStates
                                    228 ;C:/gbdk/ZGB/common/src/main.c:115: InitSprites();
      000069 CDr00r00         [24]  229 	call	_InitSprites
                                    230 ;C:/gbdk/ZGB/common/src/main.c:116: POP_BANK;
      00006C CDr00r00         [24]  231 	call	_PopBank
                                    232 ;C:/gbdk/ZGB/common/src/main.c:133: }
      00006F F3               [ 4]  233 	di
                                    234 ;C:/gbdk/ZGB/common/src/main.c:122: TMA_REG = 0xBCU;
      000070 3E BC            [ 8]  235 	ld	a, #0xbc
      000072 E0r00            [12]  236 	ldh	(_TMA_REG + 0), a
                                    237 ;C:/gbdk/ZGB/common/src/main.c:124: TAC_REG = 0x04U;
      000074 3E 04            [ 8]  238 	ld	a, #0x04
      000076 E0r00            [12]  239 	ldh	(_TAC_REG + 0), a
                                    240 ;C:/gbdk/ZGB/common/src/main.c:127: add_low_priority_TIM(MusicCallback); 
      000078 11r00r00         [12]  241 	ld	de, #_MusicCallback
      00007B CDr00r00         [24]  242 	call	_add_low_priority_TIM
                                    243 ;C:/gbdk/ZGB/common/src/main.c:129: add_VBL(vbl_update);
      00007E 11r09r00         [12]  244 	ld	de, #_vbl_update
      000081 CDr00r00         [24]  245 	call	_add_VBL
                                    246 ;C:/gbdk/ZGB/common/src/main.c:131: STAT_REG |= 0x40; 
      000084 F0r00            [12]  247 	ldh	a, (_STAT_REG + 0)
      000086 F6 40            [ 8]  248 	or	a, #0x40
      000088 E0r00            [12]  249 	ldh	(_STAT_REG + 0), a
                                    250 ;C:/gbdk/ZGB/common/src/main.c:132: add_LCD(LCD_isr);
      00008A 11r00r00         [12]  251 	ld	de, #_LCD_isr
      00008D CDr00r00         [24]  252 	call	_add_LCD
      000090 FB               [ 4]  253 	ei
                                    254 ;C:/gbdk/ZGB/common/src/main.c:135: set_interrupts(VBL_IFLAG | TIM_IFLAG | LCD_IFLAG);
      000091 3E 07            [ 8]  255 	ld	a, #0x07
      000093 CDr00r00         [24]  256 	call	_set_interrupts
                                    257 ;C:/gbdk/ZGB/common/src/main.c:137: LCDC_REG |= LCDCF_OBJDEFAULT | LCDCF_OBJON | LCDCF_BGON;
      000096 F0r00            [12]  258 	ldh	a, (_LCDC_REG + 0)
      000098 F6 07            [ 8]  259 	or	a, #0x07
      00009A E0r00            [12]  260 	ldh	(_LCDC_REG + 0), a
                                    261 ;C:/gbdk/ZGB/common/src/main.c:138: WY_REG = 145;
      00009C 3E 91            [ 8]  262 	ld	a, #0x91
      00009E E0r00            [12]  263 	ldh	(_WY_REG + 0), a
                                    264 ;C:/gbdk/ZGB/common/src/main.c:140: while(1) {
      0000A0                        265 00112$:
                                    266 ;C:/gbdk/ZGB/common/src/main.c:141: DISPLAY_OFF
      0000A0 CDr00r00         [24]  267 	call	_display_off
                                    268 ;C:/gbdk/ZGB/common/src/main.c:143: if(stop_music_on_new_state)
      0000A3 FAr00r00         [16]  269 	ld	a, (#_stop_music_on_new_state)
      0000A6 B7               [ 4]  270 	or	a, a
      0000A7 28 10            [12]  271 	jr	Z, 00103$
                                    272 ;C:/gbdk/ZGB/common/src/main.c:145: StopMusic;
      0000A9 21r00r00         [12]  273 	ld	hl, #_hUGE_paused
      0000AC 36 01            [12]  274 	ld	(hl), #0x01
      0000AE 3E 01            [ 8]  275 	ld	a, #0x01
      0000B0 CDr00r00         [24]  276 	call	_hUGE_mute
      0000B3 AF               [ 4]  277 	xor	a, a
      0000B4 21r00r00         [12]  278 	ld	hl, #_last_music
      0000B7 22               [ 8]  279 	ld	(hl+), a
      0000B8 77               [ 8]  280 	ld	(hl), a
      0000B9                        281 00103$:
                                    282 ;C:/gbdk/ZGB/common/src/main.c:148: SpriteManagerReset();
      0000B9 CDr00r00         [24]  283 	call	_SpriteManagerReset
                                    284 ;C:/gbdk/ZGB/common/src/main.c:149: state_running = 1;
      0000BC 21r00r00         [12]  285 	ld	hl, #_state_running
      0000BF 36 01            [12]  286 	ld	(hl), #0x01
                                    287 ;C:/gbdk/ZGB/common/src/main.c:150: current_state = next_state;
      0000C1 FAr00r00         [16]  288 	ld	a, (#_next_state)
      0000C4 EAr01r00         [16]  289 	ld	(#_current_state),a
                                    290 ;C:/gbdk/ZGB/common/src/main.c:151: scroll_target = 0;
      0000C7 AF               [ 4]  291 	xor	a, a
      0000C8 21r00r00         [12]  292 	ld	hl, #_scroll_target
      0000CB 22               [ 8]  293 	ld	(hl+), a
      0000CC 77               [ 8]  294 	ld	(hl), a
                                    295 ;C:/gbdk/ZGB/common/src/main.c:152: last_bg_pal_loaded = 0;
      0000CD 21r00r00         [12]  296 	ld	hl, #_last_bg_pal_loaded
      0000D0 36 00            [12]  297 	ld	(hl), #0x00
                                    298 ;C:/gbdk/ZGB/common/src/main.c:153: last_tile_loaded = 0;
      0000D2 21r00r00         [12]  299 	ld	hl, #_last_tile_loaded
      0000D5 36 00            [12]  300 	ld	(hl), #0x00
                                    301 ;C:/gbdk/ZGB/common/src/main.c:164: BGP_REG = OBP0_REG = OBP1_REG = PAL_DEF(0, 1, 2, 3);
      0000D7 3E E4            [ 8]  302 	ld	a, #0xe4
      0000D9 E0r00            [12]  303 	ldh	(_OBP1_REG + 0), a
      0000DB 3E E4            [ 8]  304 	ld	a, #0xe4
      0000DD E0r00            [12]  305 	ldh	(_OBP0_REG + 0), a
      0000DF 3E E4            [ 8]  306 	ld	a, #0xe4
      0000E1 E0r00            [12]  307 	ldh	(_BGP_REG + 0), a
                                    308 ;C:/gbdk/ZGB/common/src/main.c:166: PUSH_BANK(stateBanks[current_state]);
      0000E3 3Er00            [ 8]  309 	ld	a, #<(_stateBanks)
      0000E5 21r01r00         [12]  310 	ld	hl, #_current_state
      0000E8 86               [ 8]  311 	add	a, (hl)
      0000E9 4F               [ 4]  312 	ld	c, a
      0000EA 3Es00            [ 8]  313 	ld	a, #>(_stateBanks)
      0000EC CE 00            [ 8]  314 	adc	a, #0x00
      0000EE 47               [ 4]  315 	ld	b, a
      0000EF 0A               [ 8]  316 	ld	a, (bc)
      0000F0 F5               [16]  317 	push	af
      0000F1 33               [ 8]  318 	inc	sp
      0000F2 CDr00r00         [24]  319 	call	_PushBank
      0000F5 33               [ 8]  320 	inc	sp
                                    321 ;C:/gbdk/ZGB/common/src/main.c:167: (startFuncs[current_state])();
      0000F6 01r00r00         [12]  322 	ld	bc, #_startFuncs+0
      0000F9 21r01r00         [12]  323 	ld	hl, #_current_state
      0000FC 6E               [ 8]  324 	ld	l, (hl)
                                    325 ;	spillPairReg hl
                                    326 ;	spillPairReg hl
      0000FD 26 00            [ 8]  327 	ld	h, #0x00
                                    328 ;	spillPairReg hl
                                    329 ;	spillPairReg hl
      0000FF 29               [ 8]  330 	add	hl, hl
      000100 09               [ 8]  331 	add	hl, bc
      000101 4E               [ 8]  332 	ld	c, (hl)
      000102 23               [ 8]  333 	inc	hl
      000103 66               [ 8]  334 	ld	h, (hl)
                                    335 ;	spillPairReg hl
      000104 69               [ 4]  336 	ld	l, c
                                    337 ;	spillPairReg hl
                                    338 ;	spillPairReg hl
      000105 CDr00r00         [24]  339 	call	___sdcc_call_hl
                                    340 ;C:/gbdk/ZGB/common/src/main.c:168: POP_BANK;
      000108 CDr00r00         [24]  341 	call	_PopBank
                                    342 ;C:/gbdk/ZGB/common/src/main.c:169: scroll_x_vblank = scroll_x;
      00010B FAr00r00         [16]  343 	ld	a, (#_scroll_x)
      00010E EAr00r00         [16]  344 	ld	(#_scroll_x_vblank),a
                                    345 ;C:/gbdk/ZGB/common/src/main.c:170: scroll_y_vblank = scroll_y;
      000111 FAr00r00         [16]  346 	ld	a, (#_scroll_y)
      000114 EAr00r00         [16]  347 	ld	(#_scroll_y_vblank),a
                                    348 ;C:/gbdk/ZGB/common/src/main.c:172: if(state_running) {
      000117 FAr00r00         [16]  349 	ld	a, (#_state_running)
      00011A B7               [ 4]  350 	or	a, a
      00011B 28 09            [12]  351 	jr	Z, 00128$
                                    352 ;C:/gbdk/ZGB/common/src/main.c:173: DISPLAY_ON;
      00011D F0r00            [12]  353 	ldh	a, (_LCDC_REG + 0)
      00011F F6 80            [ 8]  354 	or	a, #0x80
      000121 E0r00            [12]  355 	ldh	(_LCDC_REG + 0), a
                                    356 ;C:/gbdk/ZGB/common/src/main.c:174: FadeOut();
      000123 CDr00r00         [24]  357 	call	_FadeOut
                                    358 ;C:/gbdk/ZGB/common/src/main.c:177: while (state_running) {
      000126                        359 00128$:
      000126                        360 00108$:
      000126 FAr00r00         [16]  361 	ld	a, (#_state_running)
      000129 B7               [ 4]  362 	or	a, a
      00012A 28 52            [12]  363 	jr	Z, 00110$
                                    364 ;C:/gbdk/ZGB/common/src/main.c:178: if(!vbl_count)
      00012C FAr01r00         [16]  365 	ld	a, (#_vbl_count)
      00012F B7               [ 4]  366 	or	a, a
      000130 20 03            [12]  367 	jr	NZ, 00107$
                                    368 ;C:/gbdk/ZGB/common/src/main.c:179: wait_vbl_done();
      000132 CDr00r00         [24]  369 	call	_wait_vbl_done
      000135                        370 00107$:
                                    371 ;C:/gbdk/ZGB/common/src/main.c:180: delta_time = vbl_count == 1u ? 0u : 1u;
      000135 FAr01r00         [16]  372 	ld	a, (#_vbl_count)
      000138 3D               [ 4]  373 	dec	a
      000139 28 02            [12]  374 	jr	Z, 00120$
      00013B 3E 01            [ 8]  375 	ld	a, #0x01
      00013D                        376 00120$:
      00013D EAr00r00         [16]  377 	ld	(#_delta_time),a
                                    378 ;C:/gbdk/ZGB/common/src/main.c:181: vbl_count = 0;
      000140 21r01r00         [12]  379 	ld	hl, #_vbl_count
      000143 36 00            [12]  380 	ld	(hl), #0x00
                                    381 ;C:/gbdk/ZGB/common/src/main.c:183: UPDATE_KEYS();
      000145 FAr00r00         [16]  382 	ld	a, (#_keys)
      000148 EAr00r00         [16]  383 	ld	(#_previous_keys),a
      00014B CDr00r00         [24]  384 	call	_joypad
      00014E EAr00r00         [16]  385 	ld	(#_keys),a
                                    386 ;C:/gbdk/ZGB/common/src/main.c:185: SpriteManagerUpdate();
      000151 CDr00r00         [24]  387 	call	_SpriteManagerUpdate
                                    388 ;C:/gbdk/ZGB/common/src/main.c:186: PUSH_BANK(stateBanks[current_state]);
      000154 3Er00            [ 8]  389 	ld	a, #<(_stateBanks)
      000156 21r01r00         [12]  390 	ld	hl, #_current_state
      000159 86               [ 8]  391 	add	a, (hl)
      00015A 4F               [ 4]  392 	ld	c, a
      00015B 3Es00            [ 8]  393 	ld	a, #>(_stateBanks)
      00015D CE 00            [ 8]  394 	adc	a, #0x00
      00015F 47               [ 4]  395 	ld	b, a
      000160 0A               [ 8]  396 	ld	a, (bc)
      000161 F5               [16]  397 	push	af
      000162 33               [ 8]  398 	inc	sp
      000163 CDr00r00         [24]  399 	call	_PushBank
      000166 33               [ 8]  400 	inc	sp
                                    401 ;C:/gbdk/ZGB/common/src/main.c:187: updateFuncs[current_state]();
      000167 21r01r00         [12]  402 	ld	hl, #_current_state
      00016A 6E               [ 8]  403 	ld	l, (hl)
                                    404 ;	spillPairReg hl
                                    405 ;	spillPairReg hl
      00016B 26 00            [ 8]  406 	ld	h, #0x00
                                    407 ;	spillPairReg hl
                                    408 ;	spillPairReg hl
      00016D 29               [ 8]  409 	add	hl, hl
      00016E 11r00r00         [12]  410 	ld	de, #_updateFuncs
      000171 19               [ 8]  411 	add	hl, de
      000172 4E               [ 8]  412 	ld	c, (hl)
      000173 23               [ 8]  413 	inc	hl
      000174 66               [ 8]  414 	ld	h, (hl)
                                    415 ;	spillPairReg hl
      000175 69               [ 4]  416 	ld	l, c
                                    417 ;	spillPairReg hl
                                    418 ;	spillPairReg hl
      000176 CDr00r00         [24]  419 	call	___sdcc_call_hl
                                    420 ;C:/gbdk/ZGB/common/src/main.c:188: POP_BANK;
      000179 CDr00r00         [24]  421 	call	_PopBank
      00017C 18 A8            [12]  422 	jr	00108$
      00017E                        423 00110$:
                                    424 ;C:/gbdk/ZGB/common/src/main.c:191: FadeIn();
      00017E CDr00r00         [24]  425 	call	_FadeIn
                                    426 ;C:/gbdk/ZGB/common/src/main.c:193: }
      000181 C3rA0r00         [16]  427 	jp	00112$
                                    428 	.area _CODE
                                    429 	.area _INITIALIZER
      000000                        430 __xinit__state_running:
      000000 00                     431 	.db #0x00	; 0
      000001                        432 __xinit__vbl_count:
      000001 00                     433 	.db #0x00	; 0
      000002                        434 __xinit__music_mute_frames:
      000002 00                     435 	.db #0x00	; 0
      000003                        436 __xinit__default_palette:
      000003 FF 7F                  437 	.dw #0x7fff
      000005 94 52                  438 	.dw #0x5294
      000007 4A 29                  439 	.dw #0x294a
      000009 00 00                  440 	.dw #0x0000
                                    441 	.area _CABS (ABS)
